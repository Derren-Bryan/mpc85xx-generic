## refs: https://github.com/project-openwrt/build-openwrt/blob/master/.github/workflows/main.yml

name: CI

on:
  push:
    paths-ignore:
      - '**.md' # ignore *.md files
    branches:
      - CI # TODO: only for debug
    tags:
      - v*

env:
  HOME: /home/runner/work/BuildOpenWRT

jobs:
  SDK:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: |
          git submodule update --init --recursive
          mkdir -p ${HOME}/apt 
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ${{env.HOME}}/apt
          key: apt-sdk
          restore-keys: |
            apt-
      - name: Envirment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          [[ $(ls ${HOME}/apt/ | grep -c ".deb") == "0" ]] || for item in $(ls ${HOME}/apt/*.deb );do sudo mv $item /var/cache/apt/archives;done
          docker rmi $(docker images -q)
          sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update -y
          sudo -E apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-8 gcc++-8 gcc-8-multilib g++-8-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler
          [[ $(ls /var/cache/apt/archives/ | grep -c ".deb") == "0" ]] ||  for item in $(ls /var/cache/apt/archives/*.deb );do sudo cp $item ${HOME}/apt;done 
          sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
          sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
          sudo -E apt-get autoremove -y --purge
          sudo -E apt-get clean -y
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
      - name: Configure
        working-directory: ./${{matrix.source}}
        id: conf
        run: |
          ../build_${{matrix.source}}.sh --build-sdk --feeds --save-space
          mkdir -p dl || true
          mkdir -p logs && cp .config logs/
          echo "::set-output name=date::$(date +'%Y-%m')"
      - name: CacheDL
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ./${{matrix.source}}/dl
          key: dl-sdk-${{steps.conf.outputs.date}}
          restore-keys: |
            dl-sdk-
            dl-
      - name: Download
        working-directory: ./${{matrix.source}}
        run: make download -j8 || true
      # - name: SSH connection to Actions
      #   if: always()
      #   uses: csexton/debugger-action@master
      - name: Make
        id: Make
        working-directory: ./${{matrix.source}}
        run: |
          let make_process=$(nproc)+1
          make -j${make_process} || make -j1 || make -j1 V=s
      - name: SDKLog
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-SDKLogs
          path: ${{matrix.source}}/logs
      - name: Find Archives
        id: Find
        working-directory: ./${{matrix.source}}
        run: |
          ls bin/targets/x86/64/
          SDK_PATH=$(find bin -name "*sdk*")
          echo "::set-output name=SDK_PATH::${SDK_PATH}"
          IB_PATH=$(find bin -name "*imagebuilder*")
          echo "::set-output name=IB_PATH::${IB_PATH}"
          FIRMWARE_PATH=$(find bin -name "openwrt-*-combined-*.img.gz")
          echo "::set-output name=FIRMWARE_PATH::${FIRMWARE_PATH}"
      - name: Upload SDK
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-SDK
          path: ${{matrix.source}}/${{steps.Find.outputs.SDK_PATH}}
      - name: Upload Firmware
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Firmware
          path: ${{matrix.source}}/${{steps.Find.outputs.FIRMWARE_PATH}}
      - name: Upload Imagebuilder
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Imagebuilder
          path: ${{matrix.source}}/${{steps.Find.outputs.IB_PATH}}
  Packages: # refs: https://openwrt.org/docs/guide-developer/using_the_sdk
    needs: SDK
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
        packages: [official, ctcgfw, lean, ntlf9t]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # - name: Download SDK
      #   run: |
      #     curl -L https://github.com/ElonH/BuildOpenWRT/releases/download/v1.0.0/${{matrix.source}}-SDK.zip -o SDK.zip
      #     unzip -d ./SDK_Archive/ SDK.zip
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-SDK
          path: ./SDK_Archive/
      - name: Deployment
        run: |
          git submodule update --init --recursive
          tar -xf $(find SDK_Archive -name "*sdk*") -C .
          mv $(ls | grep "sdk") ${{matrix.source}}_sdk
          mkdir ${HOME}/apt || true
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ${{env.HOME}}/apt
          key: apt-sdk
          restore-keys: |
            apt-
      - name: Envirment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          [[ $(ls ${HOME}/apt/ | grep -c ".deb") == "0" ]] || for item in $(ls ${HOME}/apt/*.deb );do sudo mv $item /var/cache/apt/archives;done
          docker rmi $(docker images -q)
          sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update -y
          sudo -E apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-8 gcc++-8 gcc-8-multilib g++-8-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler
          [[ $(ls /var/cache/apt/archives/ | grep -c ".deb") == "0" ]] ||  for item in $(ls /var/cache/apt/archives/*.deb );do sudo cp $item ${HOME}/apt;done 
          sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
          sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
          sudo -E apt-get autoremove -y --purge
          sudo -E apt-get clean -y
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
      - name: Configure
        working-directory: ./${{matrix.source}}_sdk
        id: conf
        run: |
          ../build_${{matrix.source}}.sh --sdk --feeds --packages-${{matrix.packages}} --save-space
          mkdir dl || true
          echo "::set-output name=date::$(date +'%Y-%m')"
      - name: CacheDL
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ./${{matrix.source}}_sdk/dl
          key: dl-packages-${{steps.conf.outputs.time}}
          restore-keys: |
            dl-packages-
            dl-
      - name: Download
        working-directory: ./${{matrix.source}}_sdk
        run: make download -j8 || true
      - name: Make
        working-directory: ./${{matrix.source}}_sdk
        run: |
          let make_process=$(nproc)+1
          make -j${make_process} IGNORE_ERRORS=1 || make -j1 IGNORE_ERRORS=1 || true
      - name: Upload Packages
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Packages-${{matrix.packages}}
          # TODO: ${{matrix.source}}_sdk/bin/packages
          path: ${{matrix.source}}_sdk/bin
  Targets: # refs: https://openwrt.org/docs/guide-user/additional-software/imagebuilder
    needs: [Packages]
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # - name: Download IB and Package
      #   run: |
      #     curl -L https://github.com/ElonH/BuildOpenWRT/releases/download/v1.0.0/${{matrix.source}}-Imagebuilder.zip -o Imagebuilder.zip
      #     curl -L https://github.com/ElonH/BuildOpenWRT/releases/download/v1.0.0/${{matrix.source}}-Package.zip -o Package.zip
      #     unzip -d ./IB_Archive/ Imagebuilder.zip
      #     unzip -d ./Packages_Archive/ Package.zip
      - name: Download Imagebuilder
        uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Imagebuilder
          path: ./IB_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-ctcgfw
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-lean
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-ntlf9t
          path: ./Packages_Archive/
      - name: Deployment
        run: |
          mkdir -p ./${{matrix.source}}_sdk/
          mv ./Packages_Archive ./${{matrix.source}}_sdk/bin
          tar -xf $(find IB_Archive -name "*imagebuilder*") -C .
          mv $(ls | grep "imagebuilder") ${{matrix.source}}_ib
          # rm ${{matrix.source}}_ib/packages -rf
          mkdir ${HOME}/apt || true
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ${{env.HOME}}/apt
          key: apt-targets
          restore-keys: |
            apt-
      - name: Envirment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          [[ $(ls ${HOME}/apt/ | grep -c ".deb") == "0" ]] || for item in $(ls ${HOME}/apt/*.deb );do sudo mv $item /var/cache/apt/archives;done
          sudo apt-get update -y
          sudo apt-get install -y build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc wget unzip python
          [[ $(ls /var/cache/apt/archives/ | grep -c ".deb") == "0" ]] ||  for item in $(ls /var/cache/apt/archives/*.deb );do sudo cp $item ${HOME}/apt;done 
      - name: Configure
        working-directory: ./${{matrix.source}}_ib
        run: |
          ../build_${{matrix.source}}.sh --image
      - uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Packages
          path: ./${{matrix.source}}_sdk/bin
      - name: Tar
        if: github.event.ref_type == 'tag'
        working-directory: ./${{matrix.source}}_sdk
        run: |
          cp ./bin ${{matrix.source}}-Packages -rf
          tar -cf ${{matrix.source}}-Packages.tar ${{matrix.source}}-Packages
      - uses: svenstaro/upload-release-action@v1-release
        if: github.event.ref_type == 'tag'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{matrix.source}}_sdk/${{matrix.source}}-Packages.tar
          asset_name: ${{matrix.source}}-Packages.tar
          tag: ${{ github.ref }}
          overwrite: true
      # - name: Build
      #   working-directory: ./${{matrix.source}}_ib
      #   run: |
      #     make image
      # - uses: actions/upload-artifact@master
      #   with:
      #     name: ${{matrix.source}}-Targets
      #     path: ./${{matrix.source}}_ib/bin/targets
