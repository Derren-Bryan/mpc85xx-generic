## refs: https://github.com/project-openwrt/build-openwrt/blob/master/.github/workflows/main.yml

name: OpenWRT

on:
  push:
    paths-ignore:
      - '**.md' # ignore *.md files
    branches:
      - master
    tags:
      - v*.*.*

jobs:
  APT:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: tag-name-${{github.ref}}
        run: |
          tag="${{github.ref}}"
          [[ $tag == refs/heads/* ]] && tag="${tag#refs/heads/}-alpha"
          [[ ${{github.ref}} == refs/heads/master ]] && tag="snapshot"
          [[ $tag == refs/tags/* ]] && tag="${tag#refs/tags/}"
          echo "$tag"
      - id: time
        run: |
          echo "::set-output name=date::$(date +'%Y-%m')"
      - name: CacheAPT
        id: cache
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ./scripts/apt
          key: apt-sdk-test-${{steps.time.outputs.date}}
          # restore-keys: |
          #   apt-sdk
          #   apt
      - if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo -E apt-get update -y
          sudo -E apt install -y apt-rdepends
          ./scripts/download-apt.sh
          # sudo dpkg -i ./scripts/apt/*.deb

  SDK:
    runs-on: ubuntu-18.04
    needs: [APT]
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: time
        run: |
          git submodule update --init --recursive
          mkdir -p ./scripts/apt 2>/dev/null || true
          echo "::set-output name=date::$(date +'%Y-%m')"
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ./scripts/apt
          key: apt-sdk-test-${{steps.time.outputs.date}}
      - name: Envirment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update -y
          sudo -E apt-get autoremove -y --purge
          sudo -E apt-get clean -y
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
          sudo dpkg -i ./scripts/apt/*.deb || true
          sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
          sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
      - name: Configure
        working-directory: ./${{matrix.source}}
        run: |
          ../build_${{matrix.source}}.sh --build-sdk --feeds --save-space
          mkdir -p dl || true
      - name: CacheDL
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        id: cache
        with:
          path: ./${{matrix.source}}/dl
          key: dl-test-${{steps.time.outputs.date}}
      - name: Download
        working-directory: ./${{matrix.source}}
        run: make download -j8 || true
      - name: Make
        id: Make
        working-directory: ./${{matrix.source}}
        run: |
          let make_process=$(nproc)+1
          make -j${make_process} || make -j1 || make -j1 V=s
      - name: SDKLog
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-SDKLogs
          path: ${{matrix.source}}/logs
      - name: Find Archives
        id: Find
        working-directory: ./${{matrix.source}}
        run: |
          ls bin/targets/*/*/
          SDK_PATH=$(find bin -name "*sdk*")
          echo "::set-output name=SDK_PATH::${SDK_PATH}"
          IB_PATH=$(find bin -name "*imagebuilder*")
          echo "::set-output name=IB_PATH::${IB_PATH}"
      - name: Upload SDK
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-SDK
          path: ${{matrix.source}}/${{steps.Find.outputs.SDK_PATH}}
      - name: Upload Imagebuilder
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Imagebuilder
          path: ${{matrix.source}}/${{steps.Find.outputs.IB_PATH}}
      - name: Prepare Firmware
        working-directory: ./${{matrix.source}}
        run: |
          rm bin/targets/*/*/packages -rf
          rm ${{steps.Find.outputs.SDK_PATH}} -rf
          rm ${{steps.Find.outputs.IB_PATH}} -rf
          ls -lh bin/targets/*/*/ || true
          ( ls bin/targets/*/*/*.vdi >/dev/null 2>&1 ) && gzip -9n bin/targets/*/*/*.vdi || true
          ( ls bin/targets/*/*/*.vmdk >/dev/null 2>&1 ) && gzip -9n bin/targets/*/*/*.vmdk || true
      - name: Upload Firmware
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Firmware
          path: ${{matrix.source}}/bin/targets
      - name: Download ALL dl
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./${{matrix.source}}
        run: |
          echo "CONFIG_ALL=y" > .config
          make defconfig
          make download -j8 || make download -j8 || make download -j8 || true
  Packages: # refs: https://openwrt.org/docs/guide-developer/using_the_sdk
    needs: SDK
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
        packages: 
          - official-lib-1
          - official-lib-2
          - official-net-1
          - official-net-2
          - official-lang
          - official-utils
          - official-other
          - ctcgfw
          - lean
          - other
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-SDK
          path: ./SDK_Archive/
      - name: Deployment
        id: time
        run: |
          git submodule update --init --recursive
          tar -xf $(find SDK_Archive -name "*sdk*") -C .
          mv $(ls | grep "sdk") ${{matrix.source}}_sdk
          mkdir -p ./scripts/apt 2>/dev/null || true
          echo "::set-output name=date::$(date +'%Y-%m')"
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ./scripts/apt
          key: apt-sdk-test-${{steps.time.outputs.date}}
      - name: Envirment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update -y
          sudo -E apt-get autoremove -y --purge
          sudo -E apt-get clean -y
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
          sudo dpkg -i ./scripts/apt/*.deb || true
          sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
          sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
      - name: Configure
        working-directory: ./${{matrix.source}}_sdk
        id: conf
        run: |
          ../build_${{matrix.source}}.sh --sdk --feeds --packages-${{matrix.packages}} --save-space
          mkdir -p dl 2>/dev/null || true
      - name: CacheDL
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ./${{matrix.source}}_sdk/dl
          key: dl-test-${{steps.time.outputs.date}}
      - name: Make
        working-directory: ./${{matrix.source}}_sdk
        run: |
          let make_process=$(nproc)+1
          make -j${make_process} IGNORE_ERRORS="y m n" |& tee logs/log.out
      - name: Create issues
        working-directory: ./${{matrix.source}}_sdk
        run: |
          SOURCE_URL=$(cat ../.gitmodules| grep "path = ${{matrix.source}}$" -A 2 | grep "url = .*git$" -o | cut -d " " -f 3)
          echo "source url: $SOURCE_URL"
          ISSUES_REPO="$(echo "$SOURCE_URL" | cut -d "/" -f 4-5 | cut -d "." -f 1)-isco"
          echo "issues repo: $ISSUES_REPO"
          # avoid creating issues in other organization
          # [[ $(echo "$ISSUES_REPO" | cut -d '/' -f 1)  == "project-openwrt" ]] && (../scripts/create-issues -cpo ${{github.repository}} -ipo "$ISSUES_REPO" -l ./logs -u ${{github.actor}} -t ${{secrets.RELEASE_TOKEN}} || true)
          # dry run
          ../scripts/create-issues -d -cpo ${{github.repository}} -ipo "$ISSUES_REPO" -l ./logs -u ${{github.actor}} -t ${{secrets.RELEASE_TOKEN}} || true
          echo "--------------"
          echo "mini-config:"
          cat logs/minial_config
      - name: Upload Logs
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Logs-${{matrix.packages}}
          path: ${{matrix.source}}_sdk/logs
      - name: Upload Packages
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Packages-${{matrix.packages}}
          path: ${{matrix.source}}_sdk/bin
  Targets: # refs: https://openwrt.org/docs/guide-user/additional-software/imagebuilder
    needs: [Packages]
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
    steps:
      - uses: actions/checkout@v2
      - name: Download Imagebuilder
        uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Imagebuilder
          path: ./IB_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-lib-1
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-lib-2
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-net-1
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-net-2
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-lang
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-utils
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-other
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-ctcgfw
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-lean
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-other
          path: ./Packages_Archive/
      - name: Deployment
        id: time
        run: |
          mkdir -p ./${{matrix.source}}_sdk/
          mv ./Packages_Archive ./${{matrix.source}}_sdk/bin
          tar -xf $(find IB_Archive -name "*imagebuilder*") -C .
          mv $(ls | grep "imagebuilder") ${{matrix.source}}_ib
          # rm ${{matrix.source}}_ib/packages -rf
          mkdir -p ./scripts/apt 2>/dev/null || true
          echo "::set-output name=date::$(date +'%Y-%m')"
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ./scripts/apt
          key: apt-sdk-test-${{steps.time.outputs.date}}
      - name: Envirment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update -y
          sudo -E apt-get autoremove -y --purge
          sudo -E apt-get clean -y
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
          sudo dpkg -i ./scripts/apt/*.deb || true
          sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
          sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
      - name: Configure
        working-directory: ./${{matrix.source}}_ib
        run: |
          ../build_${{matrix.source}}.sh --image
      - uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Packages
          path: ./${{matrix.source}}_sdk/bin
      # - name: Build
      #   working-directory: ./${{matrix.source}}_ib
      #   run: |
      #     make image
      # - uses: actions/upload-artifact@master
      #   with:
      #     name: ${{matrix.source}}-Targets
      #     path: ./${{matrix.source}}_ib/bin/targets
  ReleasePre:
    needs: [Targets]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: tag-name
        id: tag
        run: |
          tag="${{github.ref}}"
          [[ $tag == refs/heads/* ]] && tag="${tag#refs/heads/}-alpha"
          [[ ${{github.ref}} == refs/heads/master ]] && tag="snapshot"
          [[ $tag == refs/tags/* ]] && tag="${tag#refs/tags/}"
          echo "::set-output name=tagName::$tag"
      - name: Update Tag
        run: |
          git tag ${{steps.tag.outputs.tagName}} ${{github.sha}} --force
          git push "https://${{github.actor}}:${{secrets.RELEASE_TOKEN}}@github.com/${{github.repository}}.git" ${{steps.tag.outputs.tagName}} --force
      - name: Create Release # https://github.com/actions/create-release/issues/46
        id: create_release
        uses: svenstaro/upload-release-action@v1-release
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          tag: ${{steps.tag.outputs.tagName}}
          name: Release ${{steps.tag.outputs.tagName}}
          allow_override: true
          body: |
            Activate `ootoc` in `latest`
            ``` bash
            bash <(wget -qO- https://cdn.jsdelivr.net/gh/${{github.repository}}@master/feeds/scripts/activate-ootoc.sh) latest ${{steps.tag.outputs.tagName}}
            ```
            Activate `ootoc` in `ctcgfw`
            ``` bash
            bash <(wget -qO- https://cdn.jsdelivr.net/gh/${{github.repository}}@master/feeds/scripts/activate-ootoc.sh) ctcgfw ${{steps.tag.outputs.tagName}}
            ```
      - name: Remove old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          age: '3 days'
          skip-tags: false
  Release:
    needs: [Targets]
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
    steps:
      - uses: actions/checkout@v2
      # - uses: mxschmitt/action-tmate@v1
      - name: tag-name
        id: tag
        run: |
          tag="${{github.ref}}"
          [[ $tag == refs/heads/* ]] && tag="${tag#refs/heads/}-alpha"
          [[ ${{github.ref}} == refs/heads/master ]] && tag="snapshot"
          [[ $tag == refs/tags/* ]] && tag="${tag#refs/tags/}"
          echo "::set-output name=tagName::$tag"
      - id: time
        run: |
          mkdir -p ./scripts/apt 2>/dev/null || true
          echo "::set-output name=date::$(date +'%Y-%m')"
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ./scripts/apt
          key: apt-sdk-test-${{steps.time.outputs.date}}
      - name: Envirment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update -y
          sudo -E apt-get autoremove -y --purge
          sudo -E apt-get clean -y
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
          sudo dpkg -i ./scripts/apt/*.deb || true
          sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
          sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
      - name: ootoc
        run: |
          git clone https://github.com/jbeder/yaml-cpp.git && cd yaml-cpp
          cmake -DYAML_CPP_BUILD_TESTS:BOOL=OFF -DYAML_BUILD_SHARED_LIBS:BOOL=ON .
          make && sudo make install
          git clone https://github.com/gabime/spdlog.git && cd spdlog
          cmake -DSPDLOG_BUILD_TESTS:BOOL=OFF -DSPDLOG_BUILD_SHARED:BOOL=ON -DSPDLOG_BUILD_EXAMPLE:BOOL=OFF .
          make && sudo make install
          git clone https://github.com/ElonH/libtar.git && cd libtar
          autoreconf --force --install
          ./configure && make && sudo make install
          git clone --recursive https://github.com/ElonH/ootoc.git && cd ootoc
          cmake -DOOTOC_TEST:BOOL=OFF .
          make && sudo make install
          sudo ldconfig
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-SDK
          path: ./${{matrix.source}}-SDK/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Imagebuilder
          path: ./${{matrix.source}}-Imagebuilder/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Firmware
          path: ./${{matrix.source}}-Firmware/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages
          path: ./${{matrix.source}}-Packages/
      - run: |
          tar -cf ${{matrix.source}}-SDK-${{steps.tag.outputs.tagName}}.tar ${{matrix.source}}-SDK
          tar -cf ${{matrix.source}}-Imagebuilder-${{steps.tag.outputs.tagName}}.tar ${{matrix.source}}-Imagebuilder
          tar -cf ${{matrix.source}}-Firmware-${{steps.tag.outputs.tagName}}.tar ${{matrix.source}}-Firmware
          tar -cf ${{matrix.source}}-Packages-${{steps.tag.outputs.tagName}}.tar ${{matrix.source}}-Packages
          ootocCLI parse -i ${{matrix.source}}-Packages-${{steps.tag.outputs.tagName}}.tar -o ${{matrix.source}}-Packages-${{steps.tag.outputs.tagName}}.yml
          cp ${{matrix.source}}-Packages-${{steps.tag.outputs.tagName}}.yml ${{matrix.source}}-Packages.yml
      - uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Aux
          path: ./${{matrix.source}}-Packages.yml
      - name: checksum
        run: |
          rm ./${{matrix.source}}-Packages.yml
          sha256sum *.tar *.yml | tee ${{matrix.source}}-SHA256SUM-${{steps.tag.outputs.tagName}}.sign
      - uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.RELEASE_TOKEN }}
          file: ./*.tar
          tag: ${{steps.tag.outputs.tagName}}
          file_glob: true
          overwrite: true
      - uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.RELEASE_TOKEN }}
          file: ./*.yml
          tag: ${{steps.tag.outputs.tagName}}
          file_glob: true
          overwrite: true
      - uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.RELEASE_TOKEN }}
          file: ./*.sign
          tag: ${{steps.tag.outputs.tagName}}
          file_glob: true
          overwrite: true
      # - name: snapshot update
      #   if: startsWith(github.ref, 'refs/heads/')
      #   run: |
      #     git config --local user.email "action@github.com"
      #     git config --local user.name "GitHub Action"
      #     git add ${{matrix.source}}-Packages
      #     git commit -m "Release ${{matrix.source}}-Packages-${{steps.tag.outputs.tagName}} ${{github.sha}}"
      #     git tag snapshot --force
      #     git push "https://${{github.actor}}:${{secrets.RELEASE_TOKEN}}@github.com/${{github.repository}}.git" snapshot --force

