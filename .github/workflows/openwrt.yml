## refs: https://github.com/project-openwrt/build-openwrt/blob/master/.github/workflows/main.yml

name: OpenWRT

on:
  push:
    paths-ignore:
      - '**.md' # ignore *.md files
    # branches:
    #   - k2p

env:
  HOME: /home/runner

jobs:
  SDK:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: time
        run: |
          git submodule update --init --recursive
          mkdir -p ${{env.HOME}}/apt 2>/dev/null || true
          echo "::set-output name=date::$(date +'%Y-%m')"
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ${{env.HOME}}/apt
          key: apt-sdk-${{steps.time.outputs.date}}
          restore-keys: |
            apt-sdk
            apt
      - name: Envirment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          [[ $(ls ${{env.HOME}}/apt/ | grep -c ".deb") == "0" ]] || for item in $(ls ${{env.HOME}}/apt/*.deb );do sudo mv $item /var/cache/apt/archives;done
          docker rmi $(docker images -q)
          sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update -y
          sudo -E apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-8 gcc++-8 gcc-8-multilib g++-8-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler cmake libcurl4-openssl-dev libncursesw5-dev xsltproc genisoimage
          [[ $(ls /var/cache/apt/archives/ | grep -c ".deb") == "0" ]] ||  for item in $(ls /var/cache/apt/archives/*.deb );do sudo cp $item ${{env.HOME}}/apt;done 
          sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
          sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
          sudo -E apt-get autoremove -y --purge
          sudo -E apt-get clean -y
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
      - name: Configure
        working-directory: ./${{matrix.source}}
        run: |
          ../build_${{matrix.source}}.sh --build-sdk --feeds --save-space
          mkdir -p dl || true
          mkdir -p logs && cp .config logs/
      - name: CacheDL
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ./${{matrix.source}}/dl
          key: dl-sdk-${{steps.time.outputs.date}}
          restore-keys: |
            dl-sdk
      - name: Download
        working-directory: ./${{matrix.source}}
        run: make download -j8 || true
      - name: Make
        id: Make
        working-directory: ./${{matrix.source}}
        run: |
          let make_process=$(nproc)+1
          make -j${make_process} || make -j1 || make -j1 V=s
      - name: SDKLog
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-SDKLogs
          path: ${{matrix.source}}/logs
      - name: Find Archives
        id: Find
        working-directory: ./${{matrix.source}}
        run: |
          ls bin/targets/*/*/
          SDK_PATH=$(find bin -name "*sdk*")
          echo "::set-output name=SDK_PATH::${SDK_PATH}"
          IB_PATH=$(find bin -name "*imagebuilder*")
          echo "::set-output name=IB_PATH::${IB_PATH}"
      - name: Upload SDK
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-SDK
          path: ${{matrix.source}}/${{steps.Find.outputs.SDK_PATH}}
      - name: Upload Imagebuilder
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Imagebuilder
          path: ${{matrix.source}}/${{steps.Find.outputs.IB_PATH}}
      - name: Prepare Firmware
        working-directory: ./${{matrix.source}}
        run: |
          rm bin/targets/*/*/packages -rf
          rm ${{steps.Find.outputs.SDK_PATH}} -rf
          rm ${{steps.Find.outputs.IB_PATH}} -rf
          ls bin/targets/*/*/
      - name: Upload Firmware
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Firmware
          path: ${{matrix.source}}/bin/targets
  Packages: # refs: https://openwrt.org/docs/guide-developer/using_the_sdk
    needs: SDK
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
        packages: 
          - official-luci
          - official-lib-1
          - official-lib-2
          - official-lib-3
          - official-net-1
          - official-net-2
          - official-lang
          - official-utils
          - official-other
          - ctcgfw
          - lean
          - lienol-zxlhhyccc-ntlf9t
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-SDK
          path: ./SDK_Archive/
      - name: Deployment
        id: time
        run: |
          git submodule update --init --recursive
          tar -xf $(find SDK_Archive -name "*sdk*") -C .
          mv $(ls | grep "sdk") ${{matrix.source}}_sdk
          mkdir -p ${{env.HOME}}/apt 2>/dev/null || true
          echo "::set-output name=date::$(date +'%Y-%m')"
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ${{env.HOME}}/apt
          key: apt-sdk-${{steps.time.outputs.date}}
          restore-keys: |
            apt-sdk
            apt
      - name: Envirment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          [[ $(ls ${{env.HOME}}/apt/ | grep -c ".deb") == "0" ]] || for item in $(ls ${{env.HOME}}/apt/*.deb );do sudo mv $item /var/cache/apt/archives;done
          docker rmi $(docker images -q)
          sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update -y
          sudo -E apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-8 gcc++-8 gcc-8-multilib g++-8-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler
          [[ $(ls /var/cache/apt/archives/ | grep -c ".deb") == "0" ]] ||  for item in $(ls /var/cache/apt/archives/*.deb );do sudo cp $item ${{env.HOME}}/apt;done 
          sudo -E ln -sf /usr/bin/gcc-8 /usr/bin/gcc
          sudo -E ln -sf /usr/bin/g++-8 /usr/bin/g++
          sudo -E apt-get autoremove -y --purge
          sudo -E apt-get clean -y
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php
      - name: Configure
        working-directory: ./${{matrix.source}}_sdk
        id: conf
        run: |
          ../build_${{matrix.source}}.sh --sdk --feeds --packages-${{matrix.packages}} --save-space
          mkdir -p dl logs 2>/dev/null || true
      - name: CacheDL
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ./${{matrix.source}}_sdk/dl
          key: dl-packages-${{matrix.packages}}-${{steps.time.outputs.date}}
          restore-keys: |
            dl-packages-${{matrix.packages}}
      - name: Download
        working-directory: ./${{matrix.source}}_sdk
        run: make download -j8 || true
      - name: Make
        working-directory: ./${{matrix.source}}_sdk
        run: |
          let make_process=$(nproc)+1
          make -j${make_process} IGNORE_ERRORS="y m n" |& tee -a logs/log.out
      - name: Create issues
        working-directory: ./${{matrix.source}}_sdk
        run: |
          pip3 install --upgrade pip
          pip3 install setuptools
          PYCURL_SSL_LIBRARY=openssl pip3 install pycurl
          # ../scripts/create-issues --repo ${{github.repository}} --log ./logs/log.out --op . --user ${{github.actor}} --token ${{secrets.RELEASE_TOKEN}} || true
          ../scripts/create-issues --repo ElonH/testAction --log ./logs/log.out --op . --user ${{github.actor}} --token ${{secrets.RELEASE_TOKEN}} || true
          # TODO: debug
      - name: Upload Packages
        uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Packages-${{matrix.packages}}
          path: ${{matrix.source}}_sdk/bin
  Targets: # refs: https://openwrt.org/docs/guide-user/additional-software/imagebuilder
    needs: [Packages]
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
    steps:
      - uses: actions/checkout@v2
      - name: Download Imagebuilder
        uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Imagebuilder
          path: ./IB_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-luci
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-lib-1
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-lib-2
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-lib-3
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-net-1
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-net-2
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-lang
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-utils
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-official-other
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-ctcgfw
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-lean
          path: ./Packages_Archive/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages-lienol-zxlhhyccc-ntlf9t
          path: ./Packages_Archive/
      - name: Deployment
        id: time
        run: |
          mkdir -p ./${{matrix.source}}_sdk/
          mv ./Packages_Archive ./${{matrix.source}}_sdk/bin
          tar -xf $(find IB_Archive -name "*imagebuilder*") -C .
          mv $(ls | grep "imagebuilder") ${{matrix.source}}_ib
          # rm ${{matrix.source}}_ib/packages -rf
          mkdir -p ${{env.HOME}}/apt 2>/dev/null || true
          echo "::set-output name=date::$(date +'%Y-%m')"
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ${{env.HOME}}/apt
          key: apt-sdk-${{steps.time.outputs.date}}
          restore-keys: |
            apt-sdk
            apt
      - name: Envirment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          [[ $(ls ${{env.HOME}}/apt/ | grep -c ".deb") == "0" ]] || for item in $(ls ${env.HOME}}/apt/*.deb );do sudo mv $item /var/cache/apt/archives;done
          sudo apt-get update -y
          sudo apt-get install -y build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc wget unzip python
          [[ $(ls /var/cache/apt/archives/ | grep -c ".deb") == "0" ]] ||  for item in $(ls /var/cache/apt/archives/*.deb );do sudo cp $item ${{env.HOME}}/apt;done 
      - name: Configure
        working-directory: ./${{matrix.source}}_ib
        run: |
          ../build_${{matrix.source}}.sh --image
      - uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Packages
          path: ./${{matrix.source}}_sdk/bin
      # - name: Build
      #   working-directory: ./${{matrix.source}}_ib
      #   run: |
      #     make image
      # - uses: actions/upload-artifact@master
      #   with:
      #     name: ${{matrix.source}}-Targets
      #     path: ./${{matrix.source}}_ib/bin/targets
  ReleasePre:
    needs: [Targets]
    runs-on: ubuntu-18.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: tag-name
        id: tag
        run: |
          tag="${{github.ref}}"
          [[ $tag == refs/heads/* ]] && tag="snapshot"
          [[ $tag == refs/tags/* ]] && tag="${tag#refs/tags/}"
          echo "::set-output name=tagName::$tag"
      - name: Create Release # https://github.com/actions/create-release/issues/46
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{steps.tag.outputs.tagName}}
          body: |
            Activate `ootoc` in `latest`
            ``` bash
            bash <(wget -qO- https://cdn.jsdelivr.net/gh/${{github.repository}}@master/feeds/scripts/activate-ootoc.sh) latest ${{steps.tag.outputs.tagName}}
            ```
            Activate `ootoc` in `ctcgfw`
            ``` bash
            bash <(wget -qO- https://cdn.jsdelivr.net/gh/${{github.repository}}@master/feeds/scripts/activate-ootoc.sh) ctcgfw ${{steps.tag.outputs.tagName}}
            ```
          draft: false
          prerelease: false
      - name: Remove old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          age: '3 days'
          skip-tags: true
  Release:
    needs: [Targets]
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false #https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        source: [latest, ctcgfw]
    steps:
      - uses: actions/checkout@v2
      # - uses: mxschmitt/action-tmate@v1
      - name: tag-name
        id: tag
        run: |
          tag="${{github.ref}}"
          [[ $tag == refs/heads/* ]] && tag="snapshot"
          [[ $tag == refs/tags/* ]] && tag="${tag#refs/tags/}"
          echo "::set-output name=tagName::$tag"
          mkdir -p ${{env.HOME}}/apt 2>/dev/null || true
      - name: CacheAPT
        # refs: https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v1
        with:
          path: ${{env.HOME}}/apt
          key: apt-sdk-${{steps.time.outputs.date}}
          restore-keys: |
            apt-sdk
            apt
      - name: ootoc
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          [[ $(ls ${{env.HOME}}/apt/ | grep -c ".deb") == "0" ]] || for item in $(ls ${{env.HOME}}/apt/*.deb );do sudo mv $item /var/cache/apt/archives;done
          sudo -E apt-get update -y
          sudo -E apt-get install -y build-essential cmake libcurl4-openssl-dev
          [[ $(ls /var/cache/apt/archives/ | grep -c ".deb") == "0" ]] ||  for item in $(ls /var/cache/apt/archives/*.deb );do sudo cp $item ${{env.HOME}}/apt;done 
          git clone https://github.com/jbeder/yaml-cpp.git && cd yaml-cpp
          cmake -DYAML_CPP_BUILD_TESTS:BOOL=OFF -DYAML_BUILD_SHARED_LIBS:BOOL=ON .
          make && sudo make install
          git clone https://github.com/gabime/spdlog.git && cd spdlog
          cmake -DSPDLOG_BUILD_TESTS:BOOL=OFF -DSPDLOG_BUILD_SHARED:BOOL=ON -DSPDLOG_BUILD_EXAMPLE:BOOL=OFF .
          make && sudo make install
          git clone https://github.com/ElonH/libtar.git && cd libtar
          autoreconf --force --install
          ./configure && make && sudo make install
          git clone --recursive https://github.com/ElonH/ootoc.git && cd ootoc
          cmake -DOOTOC_TEST:BOOL=OFF .
          make && sudo make install
          sudo ldconfig
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-SDK
          path: ./${{matrix.source}}-SDK/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Imagebuilder
          path: ./${{matrix.source}}-Imagebuilder/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Firmware
          path: ./${{matrix.source}}-Firmware/
      - uses: actions/download-artifact@master
        with:
          name: ${{matrix.source}}-Packages
          path: ./${{matrix.source}}-Packages/
      - run: |
          tar -cf ${{matrix.source}}-SDK-${{steps.tag.outputs.tagName}}.tar ${{matrix.source}}-SDK
          tar -cf ${{matrix.source}}-Imagebuilder-${{steps.tag.outputs.tagName}}.tar ${{matrix.source}}-Imagebuilder
          tar -cf ${{matrix.source}}-Firmware-${{steps.tag.outputs.tagName}}.tar ${{matrix.source}}-Firmware
          tar -cf ${{matrix.source}}-Packages-${{steps.tag.outputs.tagName}}.tar ${{matrix.source}}-Packages
          ootocCLI parse -i ${{matrix.source}}-Packages-${{steps.tag.outputs.tagName}}.tar -o ${{matrix.source}}-Packages-${{steps.tag.outputs.tagName}}.yml
          cp ${{matrix.source}}-Packages-${{steps.tag.outputs.tagName}}.yml ${{matrix.source}}-Packages.yml
      - uses: actions/upload-artifact@master
        with:
          name: ${{matrix.source}}-Aux
          path: ./${{matrix.source}}-Packages.yml
      - name: checksum
        run: |
          rm ./${{matrix.source}}-Packages.yml
          sha256sum *.tar *.yml | tee ${{matrix.source}}-SHA256SUM-${{steps.tag.outputs.tagName}}.sign
      - uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.RELEASE_TOKEN }}
          file: ./*.tar
          tag: ${{steps.tag.outputs.tagName}}
          file_glob: true
          overwrite: true
      - uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.RELEASE_TOKEN }}
          file: ./*.yml
          tag: ${{steps.tag.outputs.tagName}}
          file_glob: true
          overwrite: true
      - uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.RELEASE_TOKEN }}
          file: ./*.sign
          tag: ${{steps.tag.outputs.tagName}}
          file_glob: true
          overwrite: true
      # - name: snapshot update
      #   if: startsWith(github.ref, 'refs/heads/')
      #   run: |
      #     git config --local user.email "action@github.com"
      #     git config --local user.name "GitHub Action"
      #     git add ${{matrix.source}}-Packages
      #     git commit -m "Release ${{matrix.source}}-Packages-${{steps.tag.outputs.tagName}} ${{github.sha}}"
      #     git tag snapshot --force
      #     git push "https://${{github.actor}}:${{secrets.RELEASE_TOKEN}}@github.com/${{github.repository}}.git" snapshot --force

